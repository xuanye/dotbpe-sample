// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/apaperService_20002.proto

#region Designer generated code

using Tomato.Protocol.Amp;
using Tomato.Rpc;
using Google.Protobuf;
using System.Threading.Tasks;

namespace Survey.Protocols
{
    //start for class AbstractAPaperService
    public abstract class APaperServiceBase : ServiceActor
    {
        protected override int ServiceId => 20002;


        public override Task<AmpMessage> ProcessAsync(AmpMessage req)
        {
            switch (req.MessageId)
            {

                //方法 APaperService.SaveAPaper
                case 1: return this.ProcessSaveAPaperAsync(req);

                //方法 APaperService.QueryAPaperList
                case 2: return this.ProcessQueryAPaperListAsync(req);

                //方法 APaperService.GetAPaper
                case 3: return this.ProcessGetAPaperAsync(req);

                //方法 APaperService.GetAPaperSta
                case 4: return this.ProcessGetAPaperStaAsync(req);

                default: return base.ProcessNotFoundAsync(req);
            }
        }



        //调用委托
        private async Task<AmpMessage> ProcessSaveAPaperAsync(AmpMessage req)
        {
            SaveAPaperReq request = null;

            if (req.Data == null)
            {
                request = new SaveAPaperReq();
            }
            else
            {
                request = SaveAPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "APaperService.SaveAPaper";

            var result = await SaveAPaperAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "APaperService.SaveAPaper";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<SaveAPaperRsp>> SaveAPaperAsync( SaveAPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessQueryAPaperListAsync(AmpMessage req)
        {
            QueryAPaperReq request = null;

            if (req.Data == null)
            {
                request = new QueryAPaperReq();
            }
            else
            {
                request = QueryAPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "APaperService.QueryAPaperList";

            var result = await QueryAPaperListAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "APaperService.QueryAPaperList";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<APaperListRsp>> QueryAPaperListAsync( QueryAPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessGetAPaperAsync(AmpMessage req)
        {
            GetAPaperReq request = null;

            if (req.Data == null)
            {
                request = new GetAPaperReq();
            }
            else
            {
                request = GetAPaperReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "APaperService.GetAPaper";

            var result = await GetAPaperAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "APaperService.GetAPaper";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<APaperRsp>> GetAPaperAsync( GetAPaperReq req);

        //调用委托
        private async Task<AmpMessage> ProcessGetAPaperStaAsync(AmpMessage req)
        {
            GetAPaperStaDetailReq request = null;

            if (req.Data == null)
            {
                request = new GetAPaperStaDetailReq();
            }
            else
            {
                request = GetAPaperStaDetailReq.Parser.ParseFrom(req.Data);
            }

            req.FriendlyServiceName = "APaperService.GetAPaperSta";

            var result = await GetAPaperStaAsync(request);
            var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);

            response.FriendlyServiceName = "APaperService.GetAPaperSta";
            response.Code = result.Code;
            if (result.Data != null)
            {
                response.Data = result.Data.ToByteArray();
            }
            return response;
        }
        //抽象方法
        public abstract Task<RpcResult<APaperStaDetailRsp>> GetAPaperStaAsync( GetAPaperStaDetailReq req);

    }

    //end for class AbstractAPaperService
}

#endregion Designer generated code