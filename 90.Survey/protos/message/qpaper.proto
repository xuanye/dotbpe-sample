syntax = "proto3";
package Tomato;

option csharp_namespace = "Survey.Protocols";
option optimize_for = SPEED;
import public "Tomato_option.proto";


option (common_fields) = "client_ip,identity,x_request_id,device_id,device_os,device_name,src_code,app_version,return_message" ; //设置公共字段

import public "message/common.proto";


//-----------start----------服务请求和响应顶层的消息体定义--------------------------------

// 保存问卷的请求
message SaveQPaperReq{
    //用户端IP
    string client_ip = 1; //用户端IP
    // 用户标识
    string identity = 2; // 用户标识
    //请求的唯一标识，用于服务间传递
    string x_request_id = 3 ; //请求的唯一标识，用于服务间传递
    // 问卷ID
    int32 qpaper_id = 10 ; // 问卷ID
    string subject = 11 ; // 问卷标题
    string start_time = 12 ; // 问卷开始时间
    string end_time = 13 ; // 问卷结束时间
    string description = 14 ; // 注释和说明

    repeated DTOQuestion questions = 15 ; // 问题列表

}


message SaveQPaperRsp{

    string return_message = 1; //返回错误信息

    int32 qpaper_id = 10 ; // 保存后的问卷ID
}


// 查询问卷的请求
message QueryQPaperReq{
    string client_ip = 1; //用户端IP
    string identity = 2; // 用户标识
    string x_request_id = 3 ; //请求的唯一标识，用于服务间传递


    string query = 10 ; //过滤标题
    bool check_role = 11 ; // 是否判断用户权限
    int32 page = 12 ; // 当前页码
    int32 rp = 13 ; //每页记录数
}

// 查询问卷的列表
message QPaperListRsp{

    string return_message = 1; //返回错误信息


    repeated DTOQPaper list= 10; //列表
    int32 total = 11 ; // 记录数，只在page_index = 1 才返回
}

// 获取单个问卷的请求
message GetQPaperReq{

    string client_ip = 1; //用户端IP
    string identity = 2; // 用户标识
    string x_request_id = 3 ; //请求的唯一标识，用于服务间传递


    int32 qpaper_id = 10 ; //问卷ID
    bool check_role = 11 ; // 是否判断用户权限
}

// 包括单个问卷信息的响应
message QPaperRsp{


    string return_message = 1; //返回错误信息

    int32 qpaper_id = 11 ; // 问卷ID
    string subject = 12 ; // 问卷标题

    string start_time = 13 ; // 问卷开始时间
    string end_time = 14 ; // 问卷结束时间

    string description = 15 ; // 注释和说明

    string create_user_id = 16 ; //注释

}

message QPaperFullRsp{

    string return_message = 1; //返回错误信息


    DTOQPaperWithQuestion qpaper = 10; //问卷
}


message AddAPaperReq {
    string client_ip = 1; //用户端IP
    string identity = 2; // 用户标识
    string x_request_id = 3 ; //请求的唯一标识，用于服务间传递

    int32 qpaper_id = 10 ;
    int32 count = 11 ;
}



message GetQPaperStaReq {
    string client_ip = 1; //用户端IP
    string identity = 2; // 用户标识
    string x_request_id = 3 ; //请求的唯一标识，用于服务间传递

    int32 qpaper_id = 10 ;
}

message QPaperStaRsp {
    string return_message = 1; //返回错误信息

    DTOQPaperWithQuestion qpaper = 10;

    repeated APaperStaDetail sta_detail = 11 ;
}

//--------------end-------服务请求和响应顶层的消息体定义--------------------------------

//--------------start-------以下是实际的对象----------------------------

//简化的QPaper 消息
message DTOQPaper{
    int32 qpaper_id = 1 ; // 问卷ID
    string subject = 2 ; // 问卷标题

    string start_time = 3 ; // 问卷开始时间
    string end_time = 4 ; // 问卷结束时间

    string description = 5 ; // 注释和说明

    string create_user_id = 6 ; //用户

    int32 apaper_count = 7 ; //答卷数
}

message DTOQuestion{
    string id = 1 ; //问题ID
    string topic = 2 ; //标题
    int32 paper_id = 3 ; //问卷ID

    QuestionType question_type = 4 ;//问题类型

    string item_detail= 5 ; //问题详情

    bool extend_input = 6 ; //是否自定义输入，只有在单选题 有效

}

// 完全版QPaper消息

message DTOQPaperWithQuestion{

    int32 qpaper_id = 1 ; // 问卷ID
    string subject = 2 ; // 问卷标题

    string start_time = 3 ; // 问卷开始时间
    string end_time = 4 ; // 问卷结束时间

    string description = 5 ; // 注释和说明

    int32 apaper_count = 7 ; //答卷数

    repeated DTOQuestion questions = 10 ; // 问题列表

}


enum QuestionType {
    SINGLE =  0; //单选
    MULTIPLE = 1; //多选
    SUBJECTIVE =2 ; //主观题
}

//--------------end-------实际的对象结束--------------------------
